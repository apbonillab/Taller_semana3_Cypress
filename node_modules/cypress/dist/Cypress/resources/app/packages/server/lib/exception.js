(function() {
  var Promise, Settings, api, cache, fs, logger, pathRE, pkg, stripPath, user, winston;

  Promise = require("bluebird");

  winston = require("winston");

  fs = require("fs-extra");

  api = require("./api");

  user = require("./user");

  cache = require("./cache");

  logger = require("./logger");

  Settings = require("./util/settings");

  pkg = require("@packages/root");

  pathRE = /'?((\/|\\|[a-z]:\\)[^\s']+)+'?/ig;

  stripPath = function(text) {
    return text.replace(pathRE, "<path>");
  };

  module.exports = {
    getCache: function() {
      return cache.read();
    },
    getLogs: function() {
      return logger.getLogs();
    },
    getErr: function(err) {
      return {
        name: stripPath(err.name),
        message: stripPath(err.message),
        stack: stripPath(err.stack)
      };
    },
    getVersion: function() {
      return Promise.resolve(pkg.version);
    },
    getBody: function(err, settings) {
      var body;
      body = {
        err: this.getErr(err)
      };
      return Promise.all([this.getCache(), this.getLogs(), this.getVersion()]).spread(function(cache, logs, version) {
        body.cache = cache;
        body.logs = logs;
        body.settings = settings;
        return body.version = version;
      })["return"](body);
    },
    getAuthToken: function() {
      return user.get().then(function(user) {
        return user && user.authToken;
      });
    },
    create: function(err, settings) {
      if (process.env["CYPRESS_ENV"] !== "production") {
        return Promise.resolve();
      }
      return Promise.props({
        body: this.getBody(err, settings),
        authToken: this.getAuthToken()
      }).then(function(props) {
        return api.createRaygunException(props.body, props.authToken);
      });
    }
  };

}).call(this);
